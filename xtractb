#!/usr/bin/perl -w
$id_line      = '$Id: xtractb,v 1.1 2001/11/04 03:16:44 stones Exp $';
##############################################################################
## Title:   extractb
##
## Date:    1-27-99 
##
#$Log: xtractb,v $
#Revision 1.1  2001/11/04 03:16:44  stones
#Initial revision
#
#Revision 1.2  2002/07/16 02:26:30  stones
#rewrite with new berkely db 3
#and changes for jXtractb
#
#Revision 1.1  1999/09/01 13:06:02  stones
#Initial revision
#
#Revision 2.1  1999/05/19 13:06:49  stones
#added ENV code
#
#Revision 2.0  1999/05/09 22:48:45  stones
#Complete revamp with dbm verse lookup
#Much quicker and cleaner
#Significant code cleanup
#
#Revision 1.4  1999/01/29 20:08:26  stones
#Additional abbreviations
#minor bug fix
#
#Revision 1.3  1999/01/28 03:41:47  stones
# split extractb into cmextractb and fextractb
# this should be transparent to the user
# although both cmextractb and fextractb
# are completely standalone
#
#Revision 0.10  1999/01/25 20:39:58  stones
# Added Abbreviations
#
#Revision 0.9  1999/01/22 01:29:48  stones
# Hopefully this is the final release... (and stable)
#
#########################################################
## Change the following for localization
use FindBin;
use lib $FindBin::Bin;
##
#########################################################
use strict;
use Bible;

                                        #globals, program info
use vars qw($myname $ver $id_line);
($myname = $0) =~ s!(.*)/!!;
my $working_dir = $1;
if (!$working_dir) {$working_dir = "\.";}
($ver = '$Revision: 1.1 $') =~ s!.*: (\d+\.\d+).*!$1!;
$id_line      = '$Id: xtractb,v 1.1 2001/11/04 03:16:44 stones Exp $';
$|=1;					#flush buffers immediately

                                        #parse input arguments
my @inputs = @ARGV;
my $fh;
open $fh, ">/tmp/asdf";
print $fh @inputs;
my ($commandline,$filename) = 0;
parse_args();

                                        #redirect input
if ($commandline) {
   my $inputs = '';
   foreach (@inputs) {
     $inputs .= " $_";
   }
   $inputs =~ s/(\d+)\s+(\w+)/\"$1 $2\"/;
   my $command = "$working_dir/cmextractb $inputs";
   print STDERR "Calling: $command\n" if $debug;
   exec ($command);
} else { 
   my $inputs = '';
   foreach (@inputs) {
     $inputs .= " $_";
   }
   $inputs =~ s/(\d+)\s+(\w+)/\"$1 $2\"/;
   my $command = "$working_dir/fextractb $inputs";
   print STDERR "Calling: $command\n" if $debug;
   if (!$filename) {
     open (CMD,"|$command");
     while (<STDIN>) {print CMD $_;}
   } else {
     exec ($command);
   }
}

##################################

sub usage { 
  print <<EOL;
Usage for $myname (version $ver):
     $myname --book <book> --chapter <chapter> --verse <verse>
     (or) -b <book>
     (or) -b <book-book>
     (or) -b <book> -c <chapter>
     (or) -b <book> -c <chapter-chapter>
     (or) -b <book> -c <chapter> -v <verse-verse>
     (or) --range <ot,nt,let,whl,gos,wis>
     (or) < <input file>
     (or) -f <input file>

Specific Optional Flags:
    --translation  <translation>
EOL
   my $counter=0;
   initTranslations();
   print  "        ";
   foreach (@translations) {
     print  " $_";
     $counter++;
     if ($counter == 6) { print "\n        "; $counter = 0;}
   }
   print "\n";
die <<EOF
    --language <english(default), spanish,german>

Output Flags: 
     --raw (just text)
     --showverse (output with verse,chapter,book delination)
     --normal (for input to other programs (default))

General Optional Flags:
    --debug
    --help
    --swap_dir <swap_dir> (default:$swap_dir)
    --kill (kill the expanded library file (delete it after use))
EOF
} #end usage

##################################

sub parse_args {
    use Getopt::Long;

    my ($showhelp,$tmp);
 
    my $language; 
    my ($raw,$byverse,$format,$normal);

    GetOptions("book=s"          => \$commandline,
               "start=i"         => \$commandline,
               "filename=s"      => \$filename,
               "stop=i"          => \$commandline,
               "chapter=s"       => \$commandline,
               "verse=s"         => \$commandline,
               "range=s"         => \$commandline,
               "end"             => \$tmp,
               "translation=s"   => \$tmp,
               "language=s"      => \$language,
               "swap_dir=s"      => \$swap_dir,
               "raw"             => \$raw,
               "showverse"         => \$byverse,
               "normal"          => \$normal,
               "kill"            => \$tmp,
               "debug"         => \$debug,
               "help"            => \$showhelp )
              || ($showhelp = 1);

    if (! -d $swap_dir) {$showhelp =1;}
                                   #required arguments
    if ($showhelp) { &usage(); }

}


